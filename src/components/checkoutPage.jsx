// src/pages/CheckoutPage.jsx
import React, { useContext, useState, useEffect } from "react";
import { CartContext } from "./cartContact";
import { useNavigate } from "react-router-dom";
import Swal from "sweetalert2";

const CheckoutPage = ({ user, setUser }) => {
  const { cartItems, clearCart } = useContext(CartContext);
  const navigate = useNavigate();
  const [payment, setPayment] = useState("cod");
  const [address, setAddress] = useState(null);


  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ user login ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  useEffect(() => {
    if (!user) {
      Swal.fire({
        icon: "warning",
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
        text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    }
  }, [user]);


  // fetch user address ‡∏ñ‡πâ‡∏≤ user.address ‡πÑ‡∏°‡πà‡∏°‡∏µ
  useEffect(() => {
    const fetchAddress = async () => {
      if (!user?.id) return;

      try {
        const res = await fetch(`http://localhost:3001/user/${user.id}/address`);
        const data = await res.json();
        if (data.success && data.address) {
          setAddress(data.address);
        }
      } catch (err) {
        console.error("Fetch address error:", err);
      }
    };

    if (!user?.address) {
      fetchAddress();
    } else {
      setAddress(user.address);
    }
  }, [user]);

  if (!user) return <div className="text-center mt-5">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...</div>;

  if (cartItems.length === 0)
    return (
      <div className="container text-center" style={{ marginTop: "100px" }}>
        <h3 style={{ color: "#ed1b2f" }}>üõí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</h3>
        <button className="btn btn-danger mt-3" onClick={() => navigate("/")}>
          ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        </button>
      </div>
    );

  const totalPrice = cartItems.reduce((sum, item) => sum + item.Price * item.quantity, 0);

  const handleSubmit = async () => {
    if (!address) {
      Swal.fire({
        icon: "warning",
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á",
        text: "‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô",
      });
      navigate("/profile");
      return;
    }

    const addressString = `${address.house_number} ${address.village} ${address.street}, ${address.sub_district}, ${address.district}, ${address.province} ${address.postal_code}`;

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order
    const orderData = {
      user_id: user.id,
      contact_name: user.username || address.contact_name,
      phone: address.phone,
      address: addressString,
      payment_method: payment,
      total_price: totalPrice >= 100 ? totalPrice : totalPrice + 20,
      items: cartItems.map(item => ({
        product_id: item.ProductID,
        quantity: item.quantity,
        price: item.Price,
        discount: item.originalPrice ? item.originalPrice - item.Price : 0
      }))
    };

    try {
      const res = await fetch("http://localhost:3001/orders", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(orderData)
      });

      const data = await res.json();

      if (data.success) {
        Swal.fire({
          icon: "success",
          title: "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          html: `<p>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á: ${orderData.contact_name}</p>
               <p>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${orderData.phone}</p>
               <p>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${orderData.address}</p>
               <p>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞: ${payment === "cod" ? "üíµ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á" : payment === "bank" ? "üè¶ ‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£" : "üí≥ ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï / ‡πÄ‡∏î‡∏ö‡∏¥‡∏ï"}</p>
               <p>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${orderData.total_price} ‡∏ø</p>`,
          timer: 3000,
          showConfirmButton: true
        });

        // ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        clearCart(); // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        navigate("/");
      } else {
        Swal.fire({
          icon: "error",
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          text: data.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ"
        });
      }
    } catch (err) {
      console.error(err);
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"
      });
    }
  };

  return (
    <div className="container my-4">
      <h3 className="mb-4 text-danger">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
      <div className="row">
        {/* ‡∏™‡πà‡∏ß‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: ‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á + ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
        <div className="col-lg-7 mb-4">
          <div className="card shadow-sm mb-3">
            <div className="card-header bg-white">
              <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</strong>
            </div>
            <div className="card-body">
              <div className="mb-2">
                <label className="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á</label>
                <input
                  type="text"
                  className="form-control"
                  value={user.username || address?.contact_name || ""}
                  readOnly
                />
              </div>
              <div className="mb-2">
                <label className="form-label">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
                <input
                  type="text"
                  className="form-control"
                  value={address?.phone || ""}
                  readOnly
                />
              </div>
              <div className="mb-2">
                <label className="form-label">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</label>
                <textarea
                  className="form-control"
                  rows="3"
                  value={
                    address
                      ? `${address.house_number} ${address.village} ${address.street}, ${address.sub_district}, ${address.district}, ${address.province} ${address.postal_code}`
                      : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
                  }
                  readOnly
                />
              </div>
            </div>
          </div>

          {/* ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
          <div className="card shadow-sm">
            <div className="card-header bg-white">
              <strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</strong>
            </div>
            <div className="card-body">
              {/* COD */}
              <div className="form-check mb-2">
                <input
                  className="form-check-input"
                  type="radio"
                  name="payment"
                  value="cod"
                  checked={payment === "cod"}
                  onChange={() => setPayment("cod")}
                />
                <label className="form-check-label">üíµ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á</label>
              </div>

              {/* Bank Transfer */}
              <div className="form-check mb-2">
                <input
                  className="form-check-input"
                  type="radio"
                  name="payment"
                  value="bank"
                  checked={payment === "bank"}
                  onChange={() => setPayment("bank")}
                />
                <label className="form-check-label">üè¶ ‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</label>
              </div>
              {payment === "bank" && (
                <div className="border p-3 mb-2">
                  <p>‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û</p>
                  <p>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: 123-456-7890</p>
                  <img src="/qrcode-bank.png" alt="QR Code Bank" style={{ width: 120 }} />
                </div>
              )}

              {/* Credit/Debit Card */}
              <div className="form-check">
                <input
                  className="form-check-input"
                  type="radio"
                  name="payment"
                  value="credit"
                  checked={payment === "credit"}
                  onChange={() => setPayment("credit")}
                />
                <label className="form-check-label">üí≥ ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï / ‡πÄ‡∏î‡∏ö‡∏¥‡∏ï</label>
              </div>
              {payment === "credit" && (
                <div className="border p-3 mt-2">
                  <div className="mb-2">
                    <label className="form-label">‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£</label>
                    <input type="text" className="form-control" placeholder="xxxx-xxxx-xxxx-xxxx" />
                  </div>
                  <div className="mb-2 d-flex gap-2">
                    <div>
                      <label className="form-label">‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</label>
                      <input type="text" className="form-control" placeholder="MM/YY" />
                    </div>
                    <div>
                      <label className="form-label">CVV</label>
                      <input type="text" className="form-control" placeholder="123" />
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

        </div>

        {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏ß‡∏≤: ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° */}
        <div className="col-lg-5">
          <div className="card shadow-sm mb-3">
            <div className="card-header bg-white">
              <strong>‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</strong>
              {/* ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
              <div style={{ fontSize: 14, color: "#007bff", marginTop: 5 }}>
                üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô: ‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏£‡∏ö 100 ‡∏ö‡∏≤‡∏ó ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ!
              </div>
            </div>
            <div className="card-body">
              {cartItems.map((item) => {
                const discount = item.originalPrice && item.originalPrice > item.Price
                  ? item.originalPrice - item.Price
                  : 0;
                return (
                  <div key={item.ProductID} className="d-flex justify-content-between align-items-center mb-2">
                    <div className="d-flex align-items-center">
                      <img
                        src={item.ImageURL}
                        alt={item.ProductName}
                        style={{ width: 80, height: 80, objectFit: "contain", marginRight: 15, borderRadius: 8 }}
                      />
                      <div>
                        <span>{item.ProductName} √ó {item.quantity}</span>
                        {discount > 0 && (
                          <div style={{ fontSize: 12, color: "green" }}>
                            ‡∏•‡∏î {discount * item.quantity} ‡∏ø
                          </div>
                        )}
                      </div>
                    </div>
                    <strong>{item.Price * item.quantity} ‡∏ø</strong>
                  </div>
                );
              })}

              <hr />
              {/* ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á */}
              {totalPrice >= 100 ? (
                <div className="d-flex justify-content-between mb-2">
                  <span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</span>
                  <strong className="text-success">‡∏ü‡∏£‡∏µ</strong>
                </div>
              ) : (
                <div className="d-flex justify-content-between mb-2">
                  <span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</span>
                  <strong>20 ‡∏ø</strong>
                </div>
              )}

              <div className="d-flex justify-content-between">
                <strong>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong>
                <strong className="text-danger">
                  {totalPrice >= 100 ? totalPrice : totalPrice + 20} ‡∏ø
                </strong>
              </div>
            </div>
          </div>


          <button className="btn btn-danger w-100" onClick={handleSubmit}>
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          </button>
        </div>

      </div>
    </div>
  );
};

export default CheckoutPage;
